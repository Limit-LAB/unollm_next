/*
UnoLLM

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apimodel

import (
	"encoding/json"
	"fmt"
)

// checks if the UserLoginPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLoginPost200Response{}

// UserLoginPost200Response struct for UserLoginPost200Response
type UserLoginPost200Response struct {
	Token string `json:"token"`
}

type _UserLoginPost200Response UserLoginPost200Response

// NewUserLoginPost200Response instantiates a new UserLoginPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLoginPost200Response(token string) *UserLoginPost200Response {
	this := UserLoginPost200Response{}
	this.Token = token
	return &this
}

// NewUserLoginPost200ResponseWithDefaults instantiates a new UserLoginPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLoginPost200ResponseWithDefaults() *UserLoginPost200Response {
	this := UserLoginPost200Response{}
	return &this
}

// GetToken returns the Token field value
func (o *UserLoginPost200Response) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UserLoginPost200Response) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UserLoginPost200Response) SetToken(v string) {
	o.Token = v
}

func (o UserLoginPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLoginPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *UserLoginPost200Response) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserLoginPost200Response := _UserLoginPost200Response{}

	err = json.Unmarshal(bytes, &varUserLoginPost200Response)

	if err != nil {
		return err
	}

	*o = UserLoginPost200Response(varUserLoginPost200Response)

	return err
}

type NullableUserLoginPost200Response struct {
	value *UserLoginPost200Response
	isSet bool
}

func (v NullableUserLoginPost200Response) Get() *UserLoginPost200Response {
	return v.value
}

func (v *NullableUserLoginPost200Response) Set(val *UserLoginPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLoginPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLoginPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLoginPost200Response(val *UserLoginPost200Response) *NullableUserLoginPost200Response {
	return &NullableUserLoginPost200Response{value: val, isSet: true}
}

func (v NullableUserLoginPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLoginPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
