// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: unollm.proto

package unoLlmMod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnoLLMv1Client is the client API for UnoLLMv1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnoLLMv1Client interface {
	BlockingRequestLLM(ctx context.Context, in *LLMRequestSchema, opts ...grpc.CallOption) (*LLMResponseSchema, error)
	StreamRequestLLM(ctx context.Context, in *LLMRequestSchema, opts ...grpc.CallOption) (UnoLLMv1_StreamRequestLLMClient, error)
}

type unoLLMv1Client struct {
	cc grpc.ClientConnInterface
}

func NewUnoLLMv1Client(cc grpc.ClientConnInterface) UnoLLMv1Client {
	return &unoLLMv1Client{cc}
}

func (c *unoLLMv1Client) BlockingRequestLLM(ctx context.Context, in *LLMRequestSchema, opts ...grpc.CallOption) (*LLMResponseSchema, error) {
	out := new(LLMResponseSchema)
	err := c.cc.Invoke(ctx, "/unoLLM.UnoLLMv1/BlockingRequestLLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoLLMv1Client) StreamRequestLLM(ctx context.Context, in *LLMRequestSchema, opts ...grpc.CallOption) (UnoLLMv1_StreamRequestLLMClient, error) {
	stream, err := c.cc.NewStream(ctx, &UnoLLMv1_ServiceDesc.Streams[0], "/unoLLM.UnoLLMv1/StreamRequestLLM", opts...)
	if err != nil {
		return nil, err
	}
	x := &unoLLMv1StreamRequestLLMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnoLLMv1_StreamRequestLLMClient interface {
	Recv() (*PartialLLMResponse, error)
	grpc.ClientStream
}

type unoLLMv1StreamRequestLLMClient struct {
	grpc.ClientStream
}

func (x *unoLLMv1StreamRequestLLMClient) Recv() (*PartialLLMResponse, error) {
	m := new(PartialLLMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UnoLLMv1Server is the server API for UnoLLMv1 service.
// All implementations must embed UnimplementedUnoLLMv1Server
// for forward compatibility
type UnoLLMv1Server interface {
	BlockingRequestLLM(context.Context, *LLMRequestSchema) (*LLMResponseSchema, error)
	StreamRequestLLM(*LLMRequestSchema, UnoLLMv1_StreamRequestLLMServer) error
	mustEmbedUnimplementedUnoLLMv1Server()
}

// UnimplementedUnoLLMv1Server must be embedded to have forward compatible implementations.
type UnimplementedUnoLLMv1Server struct {
}

func (UnimplementedUnoLLMv1Server) BlockingRequestLLM(context.Context, *LLMRequestSchema) (*LLMResponseSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockingRequestLLM not implemented")
}
func (UnimplementedUnoLLMv1Server) StreamRequestLLM(*LLMRequestSchema, UnoLLMv1_StreamRequestLLMServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequestLLM not implemented")
}
func (UnimplementedUnoLLMv1Server) mustEmbedUnimplementedUnoLLMv1Server() {}

// UnsafeUnoLLMv1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnoLLMv1Server will
// result in compilation errors.
type UnsafeUnoLLMv1Server interface {
	mustEmbedUnimplementedUnoLLMv1Server()
}

func RegisterUnoLLMv1Server(s grpc.ServiceRegistrar, srv UnoLLMv1Server) {
	s.RegisterService(&UnoLLMv1_ServiceDesc, srv)
}

func _UnoLLMv1_BlockingRequestLLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequestSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoLLMv1Server).BlockingRequestLLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unoLLM.UnoLLMv1/BlockingRequestLLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoLLMv1Server).BlockingRequestLLM(ctx, req.(*LLMRequestSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnoLLMv1_StreamRequestLLM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LLMRequestSchema)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnoLLMv1Server).StreamRequestLLM(m, &unoLLMv1StreamRequestLLMServer{stream})
}

type UnoLLMv1_StreamRequestLLMServer interface {
	Send(*PartialLLMResponse) error
	grpc.ServerStream
}

type unoLLMv1StreamRequestLLMServer struct {
	grpc.ServerStream
}

func (x *unoLLMv1StreamRequestLLMServer) Send(m *PartialLLMResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UnoLLMv1_ServiceDesc is the grpc.ServiceDesc for UnoLLMv1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnoLLMv1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unoLLM.UnoLLMv1",
	HandlerType: (*UnoLLMv1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockingRequestLLM",
			Handler:    _UnoLLMv1_BlockingRequestLLM_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequestLLM",
			Handler:       _UnoLLMv1_StreamRequestLLM_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "unollm.proto",
}
